rstudio::viewData(china)
rstudio::viewData(china)
china <- read.xlsx("ps1_q3_s13.xls", sheetName="Data_for_Q3", endRows=8)
china <- read.xlsx("ps1_q3_s13.xls", sheetName="Data_for_Q3", endRow=8)
rm(list=ls())
china <- read.xlsx("ps1_q3_s13.xls", sheetName="Data_for_Q3", endRow=8)
row.names(china) <- c("Y", "C", "G", "I", "NX", "X", "M", "SD", "NA")
rstudio::viewData(china)
rstudio::viewData(china)
# kill extra columns and transpose
drops <- c("NA.")
data <- as.data.frame(t(eiu.data[,!(names(eiu.data) %in% drops)]))
date <- c(1980:2011)
data$date <- date
data <- as.data.frame(t(china[,!(names(china) %in% drops)]))
date <- c(1980:2011)
data$date <- date
rstudio::viewData(data)
rstudio::viewData(data)
rstudio::viewData(china)
china <- read.xlsx("ps1_q3_s13.xls", sheetName="Data_for_Q3")
rstudio::viewData(china)
rm(list=ls())
# load data
oecd <- read.xlsx("ps1_q3_s13.xls", sheetName="Data_for_Q3")
# replace row numbers with variable names
row.names(oecd) <- c("Y", "C", "G", "I", "NX", "X", "M", "SD", "NA")
# kill extra column and transpose
drops <- c("NA", "row.names")
data <- as.data.frame(t(oecd[,!(names(oecd) %in% drops)]))
date <- c(1980:2011)
data$date <- date
rstudio::viewData(data)
rstudio::viewData(oecd)
# replace row numbers with variable names
row.names(oecd) <- c("Y", "C", "G", "I", "NX", "X", "M", "SD", "NA")
# kill extra columns and transpose
drops <- c("NA", "row.names")
data <- as.data.frame(t(oecd[,!(names(oecd) %in% drops)]))
date <- c(1979:2011)
data$date <- date
rstudio::viewData(data)
data <- subset(data, !(data=1979))
rstudio::viewData(data)
drops <- c("NA", "row.names")
data <- as.data.frame(t(oecd[,!(names(oecd) %in% drops)]))
date <- c(1979:2011)
data$date <- date
data <- subset(data, date>1979.5)
rstudio::viewData(data)
iy <- data$I/data$Y
sy <- 1 - (data$C+data$G)/data$Y
nxy <- data$NX/data$Y
sdy <- data$SD/data$Y
data$zero <- sy - iy - nxy - sdy
rm(list=ls())
dir = "C:/Users/dbackus/Documents/Classes/Global_Economy/Deliverables/Problems"
setwd(dir)
# load packages for xls input
library("xlsx")
#library("xts")
# load data
oecd <- read.xlsx("ps1_q3_s13.xls", sheetName="Data_for_Q3", colClasses=c("numeric"))
# cool function from Espen to check column classes (watch for dreaded factors)
frameClasses <- function(x) {unlist(lapply(unclass(x),class))}
frameClasses(oecd)
# replace row numbers with variable names
row.names(oecd) <- c("Y", "C", "G", "I", "NX", "X", "M", "SD", "NA")
# kill extra columns and transpose (kludgy)
drops <- c("NA", "row.names")
data <- as.data.frame(t(oecd[,!(names(oecd) %in% drops)]))
date <- c(1979:2011)
data$date <- date
data <- subset(data, date>1979.5)
# compute ratios to Y=GDP
iy <- data$I/data$Y
sy <- 1 - (data$C+data$G)/data$Y
nxy <- data$NX/data$Y
sdy <- data$SD/data$Y
data$zero <- sy - iy - nxy - sdy
plot(date,iy,type="l",cex=1.5, lwd=2, col="red",
main="", xlab="", ylab="Ratio to GDP",
ylim=c(0,0.5),
mar=c(2,4,2,2),   # better than default in most cases
mgp=c(2.5,1,0)
)
lines(date, sy, lwd=2, col="blue")
lines(date, nxy, lwd=2, col="magenta")
abline(0,0)
text(1990, 0.45, "Saving", cex=1, adj=0)
text(1990, 0.30, "Investment", cex=1, adj=0)
text(1990, 0.07, "Net Exports", cex=1, adj=0)
mtext("China", side=3, adj=0, line=1.0, cex=1.25)
plot(date,iy,type="l",cex=1.5, lwd=2, col="red",
main="", xlab="", ylab="Ratio to GDP",
ylim=c(0,0.5),
mar=c(2,4,2,2),   # better than default in most cases
mgp=c(2.5,1,0)
)
date <- data$date
plot(date,iy,type="l",cex=1.5, lwd=2, col="red",
main="", xlab="", ylab="Ratio to GDP",
ylim=c(0,0.5),
mar=c(2,4,2,2),   # better than default in most cases
mgp=c(2.5,1,0)
)
lines(date, sy, lwd=2, col="blue")
lines(date, nxy, lwd=2, col="magenta")
abline(0,0)
text(1990, 0.45, "Saving", cex=1, adj=0)
text(1990, 0.30, "Investment", cex=1, adj=0)
text(1990, 0.07, "Net Exports", cex=1, adj=0)
mtext("China", side=3, adj=0, line=1.0, cex=1.25)
zero <- sy - iy - nxy - sdy
fix(zero)
plot(date,iy,type="l",cex=1.5, lwd=2, col="red",
main="", xlab="", ylab="Ratio to GDP",
ylim=c(-0.05,0.55),
mar=c(2,4,2,2),   # better than default in most cases
mgp=c(2.5,1,0)
)
lines(date, sy, lwd=2, col="blue")
lines(date, nxy, lwd=2, col="magenta")
abline(0,0)
text(1985, 0.45, "Saving", cex=1, adj=0)
text(1985, 0.30, "Investment", cex=1, adj=0)
text(1985, 0.07, "Net Exports", cex=1, adj=0)
mtext("China", side=3, adj=0, line=1.0, cex=1.25)
plot(date,iy,type="l",cex=1.5, lwd=2, col="red",
main="", xlab="", ylab="Ratio to GDP",
ylim=c(-0.05,0.55),
mar=c(2,4,2,2),   # better than default in most cases
mgp=c(2.5,1,0)
)
lines(date, sy, lwd=2, col="blue")
lines(date, nxy, lwd=2, col="magenta")
abline(0,0)
text(1985, 0.44, "Saving", cex=1, adj=0)
text(1985, 0.28, "Investment", cex=1, adj=0)
text(1985, 0.07, "Net Exports", cex=1, adj=0)
mtext("China", side=3, adj=0, line=1.0, cex=1.25)
#dev.copy2eps(device=postscript, file="China_shares.eps",width=8,height=6)
dev.print(device=pdf, file="China_shares.pdf",width=8,height=6)
plot(date,iy,type="l",cex=1.5, lwd=2, col="red",
main="", xlab="", ylab="Ratio to GDP",
ylim=c(-0.05,0.55),
mar=c(2,4,2,2),   # better than default in most cases
mgp=c(2.5,1,0)
)
lines(date, sy, lwd=2, col="blue")
lines(date, nxy, lwd=2, col="magenta")
abline(0,0)
text(1985, 0.28, "Saving", cex=1, adj=0)
text(1985, 0.44, "Investment", cex=1, adj=0)
text(1985, 0.07, "Net Exports", cex=1, adj=0)
mtext("China", side=3, adj=0, line=1.0, cex=1.25)
#dev.copy2eps(device=postscript, file="China_shares.eps",width=8,height=6)
dev.print(device=pdf, file="China_shares.pdf",width=8,height=6)
fix(zero)
lines(date, sdy, lwd=2, lty=3, col="black")
text(2000, -0.03, "Statistical discrepancy", cex=1, adj=0)
# compute ratios to Y=GDP
iy <- data$I/data$Y
sy <- 1 - (data$C+data$G)/data$Y
nxy <- data$NX/data$Y
sdy <- data$SD/data$Y
zero <- sy - iy - nxy - sdy
date <- data$date
fix(zero)
rm(list=ls())
dir = "C:/Users/dbackus/Documents/Classes/Global_Economy/Deliverables/Problems"
setwd(dir)
# load packages for xls input
library("xlsx")
#library("xts")
# load data
oecd <- read.xlsx("ps1_q3_s13.xls", sheetName="Data_for_Q3", colClasses=c("numeric"))
# cool function from Espen to check column classes (watch for dreaded factors)
frameClasses <- function(x) {unlist(lapply(unclass(x),class))}
frameClasses(oecd)
# replace row numbers with variable names
row.names(oecd) <- c("Y", "C", "G", "I", "NX", "X", "M", "SD", "NA")
# kill extra columns and transpose (kludgy)
drops <- c("NA", "row.names")
data <- as.data.frame(t(oecd[,!(names(oecd) %in% drops)]))
date <- c(1979:2011)
data$date <- date
data <- subset(data, date>1979.5)
# compute ratios to Y=GDP
iy <- data$I/data$Y
sy <- 1 - (data$C+data$G)/data$Y
nxy <- data$NX/data$Y
sdy <- data$SD/data$Y
zero <- sy - iy - nxy - sdy
date <- data$date
# ------------------------------------------------------------------------------
#  Global Economy, Problem Set #3, Q2 and Q3
#  Read FRED data from spreadsheet and compute ccf's
#  Written by:  Dave Backus, April 2012 and after
# ------------------------------------------------------------------------------
rm(list=ls())
dir = "C:/Users/dbackus/Documents/Classes/Global_Economy/Deliverables/Problems"
setwd(dir)
library("xlsx")
library("xts")
# 1. FRED functions from Paul
# ------------------------------------------------------------------------------
# FRED functions from Paul
callFredAPI <- function(call_string, params) {
api_key <- "055ba538c874e5974ee22d786f27fdda"
url <- paste(
"http://api.stlouisfed.org/fred/", # base url
call_string, # subdirectory--documented on fred website
"?", # separator between web address and parameter list
paste(
paste("api_key=", api_key, sep=""),
paste(
sapply(
names(params),
function(pname) {
paste(pname, "=", params[[pname]], sep="")
}
),
collapse="&" # use collapse instead of sep to flatten list
),
sep="&"
),
sep=""
)
return(xmlTreeParse(url, useInternal=TRUE))
}
# Helper function to extract specific attributes from FRED's XML
collectAttrs <- function(doc, tag, attr) {
sapply(
getNodeSet(doc, paste("//", tag)),
function(el) { xmlGetAttr(el, attr) }
)
}
# Downloads the specified series and returns it as a vector, with the dates
# of each observation stored in the vector's names attribute
getFredData <- function(series_id) {
doc <- callFredAPI("series/observations", list(series_id=series_id))
dataseries <- as.numeric(collectAttrs(doc, "observation", "value"))
names(dataseries) <- collectAttrs(doc, "observation", "date")
return(dataseries)
}
# Downloads the metadata of a FRED series and returns a particular attribute
# A list of available attributes can be found at
#   http://api.stlouisfed.org/docs/fred/series.html
getFredMetadata <- function(series_id, attribute) {
doc <- callFredAPI("series", list(series_id=series_id))
attrs <- collectAttrs(doc, "series", attribute)
return(attrs)
}
# Returns a multivariate time series of the variables specified in series_ids
getFredTable <- function(series_ids) {
data <- do.call(
merge,
lapply(
series_ids,
function(series) { as.xts(getFredData(series)) }
)
)
colnames(data) <- series_ids
return(data)
}
# cool function from Espen to check column classes (watch for dreaded factors)
frameClasses <- function(x) {unlist(lapply(unclass(x),class))}
fred.sym <- c("INDPRO", "PAYEMS", "HOUST", "RRSFS", "SP500")
fred.data <- getFredTable(fred.sym)
fred.sym <- c("INDPRO", "PAYEMS") #, "HOUST", "RRSFS", "SP500")
fred.data <- getFredTable(fred.sym)
source('~/Classes/Global_Economy/Data/FRED/Scorecard_FRED_Apr_13.R')
rm(list=ls())
# remember to change \ to /
dir = "C:/Users/dbackus/Documents/Classes/Global_Economy/Data/FRED"
setwd(dir)
# must be installed:  install.packages("XML") etc
library("XML")    # for FRED input
library("xts")    # time series package (also used for FRED)
# 1. FRED functions from Paul
# ------------------------------------------------------------------------------
# FRED functions from Paul
callFredAPI <- function(call_string, params) {
api_key <- "055ba538c874e5974ee22d786f27fdda"
url <- paste(
"http://api.stlouisfed.org/fred/", # base url
call_string, # subdirectory--documented on fred website
"?", # separator between web address and parameter list
paste(
paste("api_key=", api_key, sep=""),
paste(
sapply(
names(params),
function(pname) {
paste(pname, "=", params[[pname]], sep="")
}
),
collapse="&" # use collapse instead of sep to flatten list
),
sep="&"
),
sep=""
)
return(xmlTreeParse(url, useInternal=TRUE))
}
# Helper function to extract specific attributes from FRED's XML
collectAttrs <- function(doc, tag, attr) {
sapply(
getNodeSet(doc, paste("//", tag)),
function(el) { xmlGetAttr(el, attr) }
)
}
# Downloads the specified series and returns it as a vector, with the dates
# of each observation stored in the vector's names attribute
getFredData <- function(series_id) {
doc <- callFredAPI("series/observations", list(series_id=series_id))
dataseries <- as.numeric(collectAttrs(doc, "observation", "value"))
names(dataseries) <- collectAttrs(doc, "observation", "date")
return(dataseries)
}
# Downloads the metadata of a FRED series and returns a particular attribute
# A list of available attributes can be found at
#   http://api.stlouisfed.org/docs/fred/series.html
getFredMetadata <- function(series_id, attribute) {
doc <- callFredAPI("series", list(series_id=series_id))
attrs <- collectAttrs(doc, "series", attribute)
return(attrs)
}
# Returns a multivariate time series of the variables specified in series_ids
getFredTable <- function(series_ids) {
data <- do.call(
merge,
lapply(
series_ids,
function(series) { as.xts(getFredData(series)) }
)
)
colnames(data) <- series_ids
return(data)
}
# cool function from Espen to check column classes (watch for dreaded factors)
frameClasses <- function(x) {unlist(lapply(unclass(x),class))}
# monthly data
fred.sym.m <- c("INDPRO", "PAYEMS")
fred.data <- getFredTable(fred.sym.m)
# difference and start in 1960
fred.data <- diff(log(fred.data),12)
fred.data <- fred.data["1960-01-01/"]  # slash means go to end: "n1/n2", "/n2", "n1/"
oldpar <- par()
par(lwd=2, col="black")
score.fig <- function(IND) {
pdf(file=paste("scorecard_",IND,".pdf",sep=""), width=8, height=6)
x <- fred.data[,IND]
xbar   <- mean(x)
sigmax <- apply(x,2,sd)
#  sigmax <- sd(x)
#  print(xbar)
#  print(sigmax)
plot.xts(x,
ylab="Growth Rate (YOY)", xlab="", main="",
type="l",
mar=c(2,3,2,2), mgp=c(2.5,1,0),
)
mtext(IND, side=3, adj=0, line=0.5, cex=1.25)
abline(h=0, lwd=0.25) # axis
abline(h=xbar, lwd=2, col="red")
abline(h=xbar+sigmax, lwd=2, col="red", lty=2)
abline(h=xbar-sigmax, lwd=2, col="red", lty=2)
dev.off()
}
score.fig("INDPRO")
# ------------------------------------------------------------------------------
#  Global Economy, Problem Set #3, Q2 and Q3
#  Read FRED data from spreadsheet and compute ccf's
#  Written by:  Dave Backus, April 2012 and after
# ------------------------------------------------------------------------------
rm(list=ls())
dir = "C:/Users/dbackus/Documents/Classes/Global_Economy/Deliverables/Problems"
setwd(dir)
library("xlsx")
library("xts")
# 1. FRED functions from Paul
# ------------------------------------------------------------------------------
# FRED functions from Paul
callFredAPI <- function(call_string, params) {
api_key <- "055ba538c874e5974ee22d786f27fdda"
url <- paste(
"http://api.stlouisfed.org/fred/", # base url
call_string, # subdirectory--documented on fred website
"?", # separator between web address and parameter list
paste(
paste("api_key=", api_key, sep=""),
paste(
sapply(
names(params),
function(pname) {
paste(pname, "=", params[[pname]], sep="")
}
),
collapse="&" # use collapse instead of sep to flatten list
),
sep="&"
),
sep=""
)
return(xmlTreeParse(url, useInternal=TRUE))
}
# Helper function to extract specific attributes from FRED's XML
collectAttrs <- function(doc, tag, attr) {
sapply(
getNodeSet(doc, paste("//", tag)),
function(el) { xmlGetAttr(el, attr) }
)
}
# Downloads the specified series and returns it as a vector, with the dates
# of each observation stored in the vector's names attribute
getFredData <- function(series_id) {
doc <- callFredAPI("series/observations", list(series_id=series_id))
dataseries <- as.numeric(collectAttrs(doc, "observation", "value"))
names(dataseries) <- collectAttrs(doc, "observation", "date")
return(dataseries)
}
# Downloads the metadata of a FRED series and returns a particular attribute
# A list of available attributes can be found at
#   http://api.stlouisfed.org/docs/fred/series.html
getFredMetadata <- function(series_id, attribute) {
doc <- callFredAPI("series", list(series_id=series_id))
attrs <- collectAttrs(doc, "series", attribute)
return(attrs)
}
# Returns a multivariate time series of the variables specified in series_ids
getFredTable <- function(series_ids) {
data <- do.call(
merge,
lapply(
series_ids,
function(series) { as.xts(getFredData(series)) }
)
)
colnames(data) <- series_ids
return(data)
}
# cool function from Espen to check column classes (watch for dreaded factors)
frameClasses <- function(x) {unlist(lapply(unclass(x),class))}
#  2. Data input
# ------------------------------------------------------------------------------
fred.sym <- c("INDPRO", "PAYEMS") #, "HOUST", "RRSFS", "SP500")
fred.data <- getFredTable(fred.sym)
# first difference and start in 1990
fred.data <- diff(log(fred.data),12)
fred.data <- fred.data["1990-01-01/"]  # slash means go to end: "n1/n2", "/n2", "n1/"
data90 <- fred.data #data[data$Date >= as.Date("1990-01-01"),]
###########################################################################
# stats
data.mean <- mean(data90, na.rm=TRUE)
data.sdev <- sd(data90, na.rm=TRUE)
cor(data90[,-1], use="pairwise.complete.obs")
data90 <- data[fred.data]
data90 <- fred.data
data.mean <- mean(data90, na.rm=TRUE)
data90 <- data.frame(fred.data)
###########################################################################
# stats
data.mean <- mean(data90, na.rm=TRUE)
data90 <- fred.data
data.mean <- mean(data90, na.rm=TRUE)
names(data90)
class(data90$INDPRO)
mean(data90$INDPRO)
fred.sym <- c("INDPRO", "PAYEMS", "HOUST", "RRSFS", "SP500")
fred.data <- getFredTable(fred.sym)
# first difference and start in 1990
fred.data <- diff(log(fred.data),12)
fred.data <- fred.data["1990-01-01/"]  # slash means go to end: "n1/n2", "/n2", "n1/"
fred.sym <- c("INDPRO", "PAYEMS", "HOUST", "RRSFS") #, "SP500")
fred.data <- getFredTable(fred.sym)
# first difference and start in 1990
fred.data <- diff(log(fred.data),12)
fred.data <- fred.data["1990-01-01/"]  # slash means go to end: "n1/n2", "/n2", "n1/"
#data90 <- data[data$Date >= as.Date("1990-01-01"),]
data90 <- fred.data
data.mean <- mean(data90, na.rm=TRUE)
xtsAttributes(data90)
class(data90)
class(data90$INDPRO)
names(data90)
data.mean <- colMeans(data90, na.rm=TRUE)
head(data.mean)
data.sdev <- sd(data90, na.rm=TRUE)
cor(data90[,-1], use="pairwise.complete.obs")
cor(data90, use="pairwise.complete.obs")
head(data.sdev)
par(mfcol=c(2,2)) #, mar=c(3,3,3,3)) #  set up 2 by 2 set of ccf's
ccf(data$PAYEMS,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
ccf(data$HOUST,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Housing Starts")
ccf(data$RRSFS,data$INDPRO, na.action=na.pass, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Retail Sales")
ccf(data$SP500,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="S&P 500")
data < data90
par(mfcol=c(2,2)) #, mar=c(3,3,3,3)) #  set up 2 by 2 set of ccf's
ccf(data$PAYEMS,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
ccf(data$HOUST,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Housing Starts")
ccf(data$RRSFS,data$INDPRO, na.action=na.pass, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Retail Sales")
ccf(data$SP500,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="S&P 500")
data < data90
par(mfcol=c(2,2), mar=c(3,3,3,3)) #  set up 2 by 2 set of ccf's
ccf(data$PAYEMS,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
ccf(data$HOUST,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Housing Starts")
ccf(data$RRSFS,data$INDPRO, na.action=na.pass, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Retail Sales")
data < data.frame(data90)
par(mfcol=c(2,2), mar=c(3,3,3,3)) #  set up 2 by 2 set of ccf's
ccf(data$PAYEMS,data$INDPRO, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
