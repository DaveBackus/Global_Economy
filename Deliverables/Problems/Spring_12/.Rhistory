View(weo)
View(weo)
?read.csv
sheetCount(file.name)
sheetCount(file.name.xls)
names(weo)
View(weo)
View(weo)
# I/Y = NID_NGDP, S/Y = NGSD_NGDP
iy <- weo[weo$WEO.Subject.Code=="NID_NGDP",]
sy <- weo[weo$WEO.Subject.Code=="NGSD_NGDP",]
?subset
?write.csv
si <- rbind(iy,sy)
write(si,file=si.csv)
write(si, file="si.csv")
?write.table
write.csv(si, file="si.csv")
?subset
View(weo)
View(weo)
iy_2010 <- weo[weo$WEO.Subject.Code=="NID_NGDP",40]
sy_2010 <- weo[weo$WEO.Subject.Code=="NGSD_NGDP",40]
fix(iy_2010)
View(iy)
iy_2010 <- as.numeric(weo[weo$WEO.Subject.Code=="NID_NGDP",40])
sy_2010 <- as.numeric(weo[weo$WEO.Subject.Code=="NGSD_NGDP",40])
fix(iy_2010)
symbols(x=sy_2010, y=iy_2010, circles=1, inches=1/3, ann=F, bg="steelblue2", fg=NULL)
iy_2010 <- as.numeric(weo[weo$WEO.Subject.Code=="NID_NGDP",40])
sy_2010 <- as.numeric(weo[weo$WEO.Subject.Code=="NGSD_NGDP",40])
y_2010  <- as.numeric(weo[weo$WEO.Subject.Code=="NGDPD",40])
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/3, ann=F, bg="steelblue2", fg=NULL)
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/10, ann=F, bg="steelblue2", fg=NULL)
iy_2010 <- as.numeric(weo[weo$WEO.Subject.Code=="NID_NGDP",40])
sy_2010 <- as.numeric(weo[weo$WEO.Subject.Code=="NGSD_NGDP",40])
y_2010  <- as.numeric(weo[weo$WEO.Subject.Code=="PPPGDP",40])  # or NGDPD
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/10, ann=F, bg="steelblue2", fg=NULL)
iy_2010 <- as.numeric(weo[weo$WEO.Subject.Code=="NID_NGDP",40])
sy_2010 <- as.numeric(weo[weo$WEO.Subject.Code=="NGSD_NGDP",40])
#y_2010  <- as.numeric(weo[weo$WEO.Subject.Code=="PPPGDP",40])  # or NGDPD
y_2010  <- as.numeric(weo[weo$WEO.Subject.Code=="PPPSH",40])  # or NGDPD
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/10, ann=F, bg="steelblue2", fg=NULL)
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/3, ann=F, bg="steelblue2", fg=NULL)
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/5, ann=F, bg="steelblue2", fg=NULL)
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/4, ann=F, bg="steelblue2", fg=NULL)
fix(iy_2010)
fix(y_2010)
fix(sy_2010)
iy_2010 <- weo[weo$WEO.Subject.Code=="NID_NGDP",40]
fix(iy_2010)
iy_2010 <- weo[,40]
iy_2010 <- iy[,40]
fix(iy_2010)
names(iy)
iy_2010 <- iy$X2010
fix(iy_2010)
iy_2010 <- as.numeric(iy$X2010)
fix(iy_2010)
names(iy)
dim(iy)
iy_2010 <- as.matrix(iy[,40])
View(iy_2010)
View(iy_2010)
mode(iy_2010)
iy_2010 <- as.numeric(as.matrix(iy[,40]))
iy_2010 <- as.numeric(iy[,40])
fix(iy_2010)
sy_2010 <- as.numeric(as.matrix(sy[,40]))
iy_2010 <- as.numeric(as.matrix(iy[,40]))
y_2010  <- as.numeric(as.matrix(y[,40]))
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/4, ann=F, bg="steelblue2", fg=NULL)
gpars.list <- list(main="", xlab="", ylab="CA/GDP", col=colseq, mgp=c(2.5,1,0), xlim=c(1970,2010), axes=TRUE)
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/4, ann=F, bg="steelblue2", fg=NULL, gpars=gpars.list)
gpars.list <- list(main="", xlab="", ylab="CA/GDP", mgp=c(2.5,1,0), xlim=c(0,50), axes=TRUE)
symbols(x=sy_2010, y=iy_2010, circles=y_2010, inches=1/4, ann=F, bg="steelblue2", fg=NULL, gpars=gpars.list)
rm(list=ls())
# set working directory for output
# NB: check your own directory, and make sure to use / not \
setwd("c:/Users/dbackus/My Documents/Papers/BCH/data/WEO") # office
library(gtools)
library(gdata)
# 1. Get data
# save a copy just in case
weo.url = "http://www.imf.org/external/pubs/ft/weo/2011/01/weodata/WEOApr2011all.xls"
file.name.xls = paste("WEO_",Sys.Date(),".xls",sep="")
download.file(url=weo.url, destfile=file.name.xls, method="auto", quiet=FALSE)
file.name.csv = paste("WEO_",Sys.Date(),".csv",sep="")
weo <- read.csv(file=file.name.csv, header=TRUE)
# save a copy just in case
weo.url = "http://www.imf.org/external/pubs/ft/weo/2011/01/weodata/WEOApr2011all.xls"
file.name.xls = paste("WEO_",Sys.Date(),".xls",sep="")
download.file(url=weo.url, destfile=file.name.csv, method="auto", quiet=FALSE)
# read data
# failed on read.xls, so saved manually as csv
#weo <- read.xls(weo.url, sheet=1, header=TRUE, fill=TRUE)
file.name.csv = paste("WEO_",Sys.Date(),".csv",sep="")
weo <- read.csv(file=file.name.csv, header=TRUE)
countries <- c("AUS","CAN","CHN","GER","FRA","ITA","JPN","NOR","RUS","USA")
source('~/.active-rstudio-document');
?noquote
?aggregate
# ----------------------------------------------------------------------------
#  FamaFrench_download.R
#  Downloads data from Ken French's website and divides it into separate files
#  Background:  Ken French has lots of return data on his website (search "Ken French")
#  Most are zipped txt files, with each txt containing two or more databases
#  Commonly, there are two, with value-weighted portfolios first and equal-
#  weighted second.  The program separates them into
#    * Part 1:  header
#    * Part 2:  first database
#    * Part 3:  second database
#    * Part 4:  footer (usually a copyright notice)
#  The program does this for the data at a given url, which can be changed as
#  needed.  In theory it can be changed to any similar database without breaking
#  anything.
#  Various urls:
#     Ken French:  http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html
#     ?? more ??
#  Written by:  Paul Backus, October 2011
# ----------------------------------------------------------------------------
#  Step 1:  get data, save copy of original with "date stamp"
# source of data (url)
data.url = "http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors.zip"
# Some of this code is formatted using LISP-style indentation, with function arguments
# stacked vertically instead of listed horizontally. For example, in LISP stlye, this:
#   ifelse(x%%2 == 0, "even", "odd")
# would be rendered like this:
#   ifelse(
#     x%%2 == 0,
#     "even",
#     "odd"
#   )
# Insert today's date into the filename
zipname = paste(
# Separate name from .zip extension
strsplit(
# Extract filename from URL
rev(
# Split the url into /-delimited components
strsplit(data.url, "/", fixed=TRUE)[[1]]
)[1],
".",
fixed=TRUE
)[[1]][1],
"_",
Sys.Date(),
".zip",
sep=""
)
# Download the file and save it with a datestamp
download.file(data.url, zipname)
#  Step 2:  divide data into components
# Splits x into sub-vectors at the indices contained in idxs
split.at = function(x, idxs) {
# sapply essentially functions as a for loop here, iterating
# the variable "n" over the given range
sapply(
0:length(idxs), # number of sub-vectors == length(idxs) + 1 == size of range
function(n) {
start = ifelse(
n==0,
1,
idxs[n] + 1)
end = ifelse(
n==length(idxs),
length(x),
idxs[n+1] - 1) # Exclude splitting elements (like strsplit)
x[start:end]
}
)
}
# Iterative version of the above function, for reference
#split.at = function(x, idxs) {
#	parts = list()
#	for n in (0:length(idxs)) {
#		start = ifelse(n==0, 1, idxs[n] + 1)
#		end = ifelse(n==length(idxs), length(x), idxs[n+1] - 1) # Exclude delimiting elements
#		parts[[n + 1]] = x[start:end]
#	}
#}
# Extract the zipfile
files = unzip(zipname)
# Split each file into individual tables and writes each one to its own file
for (f in files) {
text = readLines(f)
parts = split.at(text, grep("^$", text)) # divide the file on blank lines
print(sprintf("Writing %d parts for input file %s", length(parts), f))
for (pn in (1:length(parts))) {
writeLines(parts[[pn]], paste(f, ".part", pn, sep=""))
}
}
# Functional (as opposed to procedural) version of above code, with the additional feature
# that the filenames of the resulting parts are returned as a matrix
#outfiles = sapply(
#	files,
#	function(f) {
#		text = readLines(f)
#		parts = split.at(text, grep("^$", text)) # divide the file on blank lines
#		print(sprintf("Writing %d parts for input file %s", length(parts), f))
#		ofs = sapply(
#			1:length(parts),
#			function(pn) {
#				of = paste(f, ".part", pn, sep="")
#				writeLines(parts[[pn]], of)
#				of
#			}
#		)
#		ofs
#	}
#)
source('~/Papers/Data/French/FamaFrench_download.R')
getwd()
source('~/Papers/Data/French/FamaFrench_download.R')
?sub
source('~/Papers/Data/French/FamaFrench_download.R')
?aggregate
?ts.plot
?require
?rollapply
# rather than the usual
require("XML")
require("xts")
require("XML")
require("xts")
help packages
install?
?
x
install.packages("xts")
install.packages("xml")
install.packages("XML")
require("xts")
update
# Vector listing the series to be plotted
fred_symbols = c(
"PAYEMS",
"INDPRO",
"PCEC96",
"RRSFS",
"NAPM",
"HOUST"
)
wd?
x
ls()
getwd
?getwd
getwd()
# FRED_indicators.r
getwd()
getwd()
dir
# This is computer-specific!
# FRED_indicators.r
# This R script downloads and plots datasets from the St. Louis Fed's Federal
# Reserve Economic Data (FRED) database.
# The code is organized into 3 sections:
#   1. Global variables that you can edit to set the script's basic parameters
#   2. Function definitions containing the bulk of the implementation
#   3. A few lines of code to actually trigger the execution of those functions
# Based on code by Espen Henriksen
# Reorganized, extended, and documented by Paul Backus
# A Note on Indentation Style:
# Many of the function calls in this code are formatted like this:
#   some_function(
#   	foo,
#   	bar,
#   	baz
#   )
# rather than the usual
#   some_function(foo, bar, baz)
# in order to avoid excessively long lines and make nested function calls
# easier to follow.
# If you don't have these packages, type install.packages("name")
require("XML")
require("xts")
#################################
## SECTION 1: GLOBAL VARIABLES ##
#################################
# Vector listing the series to be plotted
# Edit this with the indicators you want before you run the script!
#
# You can browse the available series by category at
#   http://research.stlouisfed.org/fred2/
# There is also a partial list on Wikipedia:
#   https://en.wikipedia.org/wiki/Federal_Reserve_Economic_Data#FRED_economic_indicators_.28partial_list.29
fred_symbols = c(
"PAYEMS",
"INDPRO",
"PCEC96",
"RRSFS",
"NAPM",
"HOUST"
)
# The directory where the plots will be saved
# This is computer-specific!
output_directory = "~/code/R/data"
##########################
## SECTION 2: FUNCTIONS ##
##########################
# Fetches raw XML data from the FRED web interface
# Full documentation can be found online at
#   http://api.stlouisfed.org/docs/fred/
callFredAPI <- function(call_string, params) {
api_key<-"055ba538c874e5974ee22d786f27fdda"
# Construct the URL from the call string and parameter list ("params")
# The finished URL should have the form:
#   http://.../fred/some/directory?api_key=foo&param1=bar[&param2=baz...]
# ie, the web address, followed by a ?, followed by a &-separated list
#   of parameters
# The api_key parameter is always required, and so is handled automatically.
url <- paste(
"http://api.stlouisfed.org/fred/", # base url
call_string, # subdirectory--documented on fred website
"?", # separator between web address and parameter list
paste(
paste("api_key=", api_key, sep=""),
paste(
sapply(
names(params),
function(pname) {
paste(pname, "=", params[[pname]], sep="")
}
),
collapse="&" # use collapse instead of sep to flatten list
),
sep="&"
),
sep=""
)
return(xmlTreeParse(url, useInternal=TRUE))
}
# Helper function to extract specific attributes from FRED's XML
collectAttrs <- function(doc, tag, attr) {
sapply(
getNodeSet(doc, paste("//", tag)),
function(el) { xmlGetAttr(el, attr) }
)
}
# Downloads the specified series and returns it as a vector, with the dates
# of each observation stored in the vector's names attribute
getFredData <- function(series_id) {
doc <- callFredAPI("series/observations", list(series_id=series_id))
dataseries <- as.numeric(collectAttrs(doc, "observation", "value"))
names(dataseries) <- collectAttrs(doc, "observation", "date")
return(dataseries)
}
# Downloads the metadata of a FRED series and returns a particular attribute
# A list of available attributes can be found at
#   http://api.stlouisfed.org/docs/fred/series.html
getFredMetadata <- function(series_id, attribute) {
doc <- callFredAPI("series", list(series_id=series_id))
attrs <- collectAttrs(doc, "series", attribute)
return(attrs)
}
# Returns a multivariate time series of the variables specified in series_ids
getFredTable <- function(series_ids) {
data <- do.call(
merge,
lapply(
series_ids,
function(series) { as.xts(getFredData(series)) }
)
)
colnames(data) <- series_ids
return(data)
}
# Bare-bones code to make plots and save them to pdf files
# This is the fallback if no other plot routine is provided
defaultPlotRoutine = function(table, colname) {
plot(table[,colname], main="")
title(main=colname)
dev.print(device=pdf, paste(colname, "pdf", sep="."))
}
# Generic function to plot the columns of a table (matrix, data.frame, xts...)
# You can pass in your own function with custom plotting commands to add
# text, labels, etc. to the plot
# Otherwise, the default plot routine defined above is used
#
# This function is not specific to FRED; it will work with any matrix-like
# table structure in R (though it does assume the existence of colnames).
plotColumns <- function(table, plotRoutine=defaultPlotRoutine) {
sapply(
colnames(table),
function(colname) {
plotRoutine(table, colname)
}
)
invisible() # no return value
}
# A more sophisticated plotting routine with FRED-specific code
# This function encapsulates all the fiddly formatting details
fredPlotRoutine <- function(table, series_id) {
plot(table[,series_id], main="")
title(
# use series title as the main title for the graph
main=getFredMetadata(series_id, "title"),
# put units on the y-axis
ylab=getFredMetadata(series_id, "units")
)
# Source attribution in small type along the bottom
mtext(
paste(
"Source: FRED, Federal Reserve Economic Data, from the Federal Reserve Bank of St. Louis; series",
series_id
),
side=1, # bottom
adj=0, # align left
padj=1, # align bottom
line=3, # don't overlap the x-axis
cex=0.7 # font size
)
# Write to pdf
dev.print(device=pdf, paste(series_id, "pdf", sep="."))
# Write to eps
dev.print(device=postscript, paste(series_id, "eps", sep="."))
}
plotColumns(getFredTable(fred_symbols), plotRoutine=fredPlotRoutine)
?dev.print
#   3. A few lines of code to actually trigger the execution of those functions
# Based on code by Espen Henriksen
source('~/Classes/Global_Economy/Data/FRED/FRED_indicators.r')
source('~/Classes/Global_Economy/Data/FRED/FRED_indicators.r')
par(mfrow=c(1,1))
source('~/Classes/Global_Economy/Deliverables/Problems/ps3_s12_FRED_data.r')
data.sdev
data.sdev[2]
par(mfrow=c(1,1))
plot(data90$Date, data90$PAYEMS, xlab="", ylab="", main="Nonfarm Employment")
abline(a=0,b=data.mean[3], col='red')
par(mfrow=c(1,1))
plot(data90$Date, data90$PAYEMS, xlab="", ylab="", main="Nonfarm Employment")
abline(a=0,b=data.mean[3], col='red')
par(mfrow=c(1,1))
plot(data90$Date, data90$PAYEMS, xlab="", ylab="", main="Nonfarm Employment")
abline(a=0,b=data.mean[3], col='red')
?abline
abline(a=data.mean[3], b=0, col='red')
plot(data90$Date, data90$PAYEMS, xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[3], b=0, col='red')
abline(a=data.mean[3]+data.sdev[3], b=0, col='red', lty=2)
plot(data90$Date, data90$PAYEMS, xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[3], b=0, col='red')
abline(a=data.mean[3]+data.sdev[3], b=0, col='red', lty=2)
abline(a=data.mean[3]-data.sdev[3], b=0, col='red', lty=2)
nvar <- 2
plot(data90$Date, data90$PAYEMS, xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 2
plot(data90$Date, data90$INDPRO, xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 4
plot(data90$Date, data90$HOUST, xlab="", ylab="", main="Housing Starts")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
par(mfrow=c(2,2))
nvar <- 2
plot(data90$Date, data90$INDPRO, xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 3
plot(data90$Date, data90$PAYEMS, xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 4
plot(data90$Date, data90$HOUST, xlab="", ylab="", main="Housing Starts")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 5
plot(data90$Date, data90$HOUST, xlab="", ylab="", main="S&P 500 Index")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
par(mfrow=c(2,2))
nvar <- 2
plot(data90$Date, data90$INDPRO, xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 3
plot(data90$Date, data90$PAYEMS, xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 4
plot(data90$Date, data90$HOUST, xlab="", ylab="", main="Housing Starts")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 5
plot(data90$Date, data90$HOUST, xlab="", ylab="", main="S&P 500 Index")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
dev.copy2eps(device=postscript, file="ps3_q3_scorecard.eps",width=8,height=6)
dev.print(device=pdf, file="ps3_q3_scorecard.pdf",width=8,height=6)
