return(dataseries)
}
# Downloads the metadata of a FRED series and returns a particular attribute
# A list of available attributes can be found at
#   http://api.stlouisfed.org/docs/fred/series.html
getFredMetadata <- function(series_id, attribute) {
doc <- callFredAPI("series", list(series_id=series_id))
attrs <- collectAttrs(doc, "series", attribute)
return(attrs)
}
# Returns a multivariate time series of the variables specified in series_ids
getFredTable <- function(series_ids) {
data <- do.call(
merge,
lapply(
series_ids,
function(series) { as.xts(getFredData(series)) }
)
)
colnames(data) <- series_ids
return(data)
}
# Bare-bones code to make plots and save them to pdf files
# This is the fallback if no other plot routine is provided
defaultPlotRoutine = function(table, colname) {
plot(table[,colname], main="")
title(main=colname)
dev.print(device=pdf, paste(colname, "pdf", sep="."))
}
# Generic function to plot the columns of a table (matrix, data.frame, xts...)
# You can pass in your own function with custom plotting commands to add
# text, labels, etc. to the plot
# Otherwise, the default plot routine defined above is used
#
# This function is not specific to FRED; it will work with any matrix-like
# table structure in R (though it does assume the existence of colnames).
plotColumns <- function(table, plotRoutine=defaultPlotRoutine) {
sapply(
colnames(table),
function(colname) {
plotRoutine(table, colname)
}
)
invisible() # no return value
}
# A more sophisticated plotting routine with FRED-specific code
# This function encapsulates all the fiddly formatting details
fredPlotRoutine <- function(table, series_id) {
plot(table[,series_id], main="")
title(
# use series title as the main title for the graph
main=getFredMetadata(series_id, "title"),
# put units on the y-axis
ylab=getFredMetadata(series_id, "units")
)
# Source attribution in small type along the bottom
mtext(
paste(
"Source: FRED, Federal Reserve Economic Data, from the Federal Reserve Bank of St. Louis; series",
series_id
),
side=1, # bottom
adj=0, # align left
padj=1, # align bottom
line=3, # don't overlap the x-axis
cex=0.7 # font size
)
# Write to pdf
dev.print(device=pdf, paste(series_id, "pdf", sep="."))
# Write to eps
dev.print(device=postscript, paste(series_id, "eps", sep="."))
}
plotColumns(getFredTable(fred_symbols), plotRoutine=fredPlotRoutine)
?dev.print
#   3. A few lines of code to actually trigger the execution of those functions
# Based on code by Espen Henriksen
source('~/Classes/Global_Economy/Data/FRED/FRED_indicators.r')
source('~/Classes/Global_Economy/Data/FRED/FRED_indicators.r')
x = 280701
y = as.integer(x/100)*100
x = 280712
y = as.integer(x/100)*100
y = as.integer(x/100)*100 + 1
library("xlsx")
source('~/Papers/BCH/data/FRED/fred_example-08-04-2013.R')
in
install.packages("countrycodes")
library(zoo)
xp1 <- 1/(1+exp(1))
xp1 <- 1/(1+exp(-1))
xp1 <- 1/(1+exp(1))
xp1 <- 1/(1+exp(-1))
xp1 <- 1/(1+exp(1))
log(5)
require(grDevices)
stars(mtcars[, 1:7], key.loc = c(14, 2),
main = "Motor Trend Cars : stars(*, full = F)", full = FALSE)
stars(mtcars[, 1:7], key.loc = c(14, 1.5),
stars(mtcars[, 1:7], key.loc = c(14, 1.5),
main = "Motor Trend Cars : full stars()",flip.labels=FALSE)
)
stars(mtcars[, 1:7], key.loc = c(14, 1.5),
main = "Motor Trend Cars : full stars()",flip.labels=FALSE)
stars(mtcars[, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
stars(USJudge, draw.segments = TRUE, scale = FALSE, key.loc = c(13,1.5))
stars(mtcars[, 1:7], key.loc = c(14, 1.5),
+       main = "Motor Trend Cars : full stars()",flip.labels=FALSE)
stars(mtcars[, 1:7], key.loc = c(14, 1.5),
main = "Motor Trend Cars : full stars()",flip.labels=FALSE)
stars(mtcars[, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
stars(mtcars[1:3, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
stars(mtcars[1:3, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1)
stars(mtcars[1:3, 1:7], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, )
stars(mtcars[1:3, 1:7], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, lwd=c(1,2,3), col.stars=c("red","blue") )
stars(mtcars[1:3, 1:7], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, lwd=c(1,2,3), col.stars=c("red","blue","yellow") )
stars(mtcars[1:3, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, lwd=c(1,2,3), col.stars=c("red","blue","yellow") )
stars(mtcars[1:3, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, lwd=c(1,2,3), col.segments=c("red","blue","yellow") )
stars(mtcars[1:3, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1) #, lwd=c(1,2,3)), col.segments=c("red","blue","yellow") )
stars(mtcars[1:6, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1) #, lwd=c(1,2,3)), col.segments=c("red","blue","yellow") )
stars(mtcars[4:6, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1) #, lwd=c(1,2,3)), col.segments=c("red","blue","yellow") )
stars(mtcars[4:6, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, lwd=c(1,2,3)), col.segments=c("red","blue","yellow") )
stars(mtcars[4:6, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, lwd=c(1,2,3), col.segments=c("red","blue","yellow") )
stars(mtcars[4:6, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, lwd=c(1,2,3), col.stars=c("red","blue","yellow") )
stars(mtcars[, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
stars(mtcars[, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
stars(mtcars[4:7, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
stars(mtcars[4:6, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
stars(mtcars[4:8, 1:5], locations=c(0,0), radius=TRUE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 1, lwd=c(1,2,3), col.stars=c("red","blue","yellow") )
stars(mtcars[4:6, 1:7], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
stars(mtcars[4:6, 1:5], locations = c(0,0), radius = FALSE,
key.loc=c(0,0), main="Motor Trend Cars", lty = 2)
# ------------------------------------------------------------------------------
#  ps3_f13.R
#  Global Economy course, functions to handle
#     * Input from FRED (uses its XML API)
#     * cross-correlation functions
#     * business cycle scorecard (graphs)
#  Recommendation:  ignore the functions in Section 1 and start with Section 2
#  Written by:  Paul Backus (fredplot.R), with input from Espen Henriksen
#  Adapted by:  Dave Backus
# ------------------------------------------------------------------------------
rm(list=ls())
# set directory (needed only to direct where to print figures)
dir = "C:/Users/dbackus/Documents/Classes/Global_Economy/Deliverables/Problems"
setwd(dir)
# load libraries/packages (these must be installed earlier)
library("XML")
library("xts")
# 1. FRED functions from Paul
# ------------------------------------------------------------------------------
# Create a URL query string from key=value parameters
queryString <- function(...) {
params <- list(...)
paste(
lapply(
names(params),
function(pname) {
paste(pname, "=", URLencode(params[[pname]]), sep="")
}
),
collapse="&" # use collapse instead of sep to flatten list
)
}
# Fetch raw XML data from the FRED web interface
# ... allows additional parameters; eg, frequency=m
# Documentation at:
#   http://api.stlouisfed.org/docs/fred/
#   http://api.stlouisfed.org/docs/fred/series_observations.html
callFredApi <- function(call_string, ...) {
api_key <- "055ba538c874e5974ee22d786f27fdda" # courtesy of Kim Ruhl
# Construct URL from call string and any parameters given in "..."
# The finished URL should have the form:
#   http://.../fred/some/resource?api_key=foo&param1=val1[&param2=val2...]
# ie, the web address, followed by a ?, followed by a &-separated list
#   of parameters
# The api_key parameter is always required, and so is handled automatically.
url <- paste(
"http://api.stlouisfed.org/fred/", # base url
call_string, # subdirectory--documented on fred website
"?", # separator between web address and parameter list
queryString(api_key=api_key, ...),
sep=""
)
return(xmlTreeParse(url, useInternal=TRUE))
}
# Helper function to extract specific attributes from FRED's XML
collectAttrs <- function(xmldoc, tag, attr) {
sapply(
getNodeSet(xmldoc, paste("//", tag)),
function(el) { xmlGetAttr(el, attr) }
)
}
# Download the specified series and returns it as a vector, with the dates
# of each observation stored in the vector's names attribute
getFredData <- function(series_id, ...) {
xmldoc <- callFredApi(
call_string="series/observations",
series_id=series_id,
...
)
dataseries <- as.numeric(collectAttrs(xmldoc, "observation", "value"))
names(dataseries) <- collectAttrs(xmldoc, "observation", "date")
return(dataseries)
}
# Download the metadata of a FRED series and returns a particular attribute
# A list of available attributes can be found at
#   http://api.stlouisfed.org/docs/fred/series.html
getFredMetadata <- function(series_id, attribute, ...) {
xmldoc <- callFredApi(
call_string="series",
series_id=series_id,
...
)
attrs <- collectAttrs(xmldoc, "series", attribute)
return(attrs)
}
# Return a multivariate time series of the variables specified in series_ids
getFredTable <- function(series_ids, ...) {
data <- do.call(
merge,
lapply(
series_ids,
function(series) { as.xts(getFredData(series, ...)) }
)
)
colnames(data) <- series_ids
return(data)
}
# cool function from Espen to check column classes (watch for dreaded factors)
frameClasses <- function(x) {unlist(lapply(unclass(x),class))}
#  2. Data input
# ------------------------------------------------------------------------------
# this version needs to be changed if we want to use monthly data for a series
# that comes in some other frequency; eg, SP500 is daily
fred.sym <- c("INDPRO", "PAYEMS", "HOUST", "RRSFS", "NAPM")
fred.data <- getFredTable(fred.sym)
# yoy difference eveything and start in Jan 1990
fred.data <- diff(log(fred.data),12)
fred.data <- fred.data["1990-01-01/"]  # slash means go to end: "n1/n2", "/n2", "n1/"
#  3. Cross-correlation functions (ccf's)
# ------------------------------------------------------------------------------
# save pars
old.pars <- par()
# not sure why, but ccf seems to need a data frame
data <- data.frame(fred.data)
# means and standard deviations
data.mean <- colMeans(data, na.rm=TRUE)
print(data.mean)
data.sdev <- sd(data, na.rm=TRUE)
print(data.sdev)
# correlations
cor(data, use="pairwise.complete.obs")
# compute and plot a ccf
par(mfcol=c(1))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
# do four at once, put in same plot
# write function for this ....
par(mfcol=c(2,2), mar=c(3,3,3,3))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Nonfarm Employment")
abline(v=0, col='red', lty=1)
ccf(data$HOUST,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Housing Starts")
abline(v=0, col='red', lty=1)
ccf(data$RRSFS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP",main="Retail Sales")
abline(v=0, col='red', lty=1)
ccf(data$NAPM,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP", main="Purchasing Managers Index")
abline(v=0, col='red', lty=1)
nvar <- 1
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$INDPRO, type="l", xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$PAYEMS, type="l", xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
par <- par(old.pars)
par(mfcol=c(1,1))
nvar <- 1
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$INDPRO, type="l", xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
par(mfcol=c(2,1))
nvar <- 1
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$INDPRO, type="l", xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 2
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$PAYEMS, type="l", xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
dev.print(device=pdf, file="scorecard.pdf",width=8,height=6)
par(mfcol=c(2,1), mar=c(3,3,3,3))
nvar <- 1
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$INDPRO, type="l", xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
nvar <- 2
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$PAYEMS, type="l", xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
dev.print(device=pdf, file="scorecard.pdf",width=8,height=6)
par(mfcol=c(3,1), mar=c(3,3,3,3))
nvar <- 1
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$INDPRO, type="l", xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
#dev.print(device=pdf, file="scorecard_ip.pdf",width=8,height=6)
nvar <- 2
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$PAYEMS, type="l", xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
#dev.print(device=pdf, file="scorecard_emp.pdf",width=8,height=6)
nvar <- 3
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$RRSFS, type="l", xlab="", ylab="", main="Retail Sales")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
dev.print(device=pdf, file="scorecard.pdf",width=8,height=6)
data.mean[3]
data.mean[nvar]-data.sdev[nvar]
data.mean[nvar]+data.sdev[nvar]
nvar <- 4
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$RRSFS, type="l", xlab="", ylab="", main="Retail Sales")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
par <- par(old.pars)
par(mfcol=c(3,1), mar=c(3,3,3,3))
nvar <- 1
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$INDPRO, type="l", xlab="", ylab="", main="Industrial Production")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
#dev.print(device=pdf, file="scorecard_ip.pdf",width=8,height=6)
nvar <- 2
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$PAYEMS, type="l", xlab="", ylab="", main="Nonfarm Employment")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
#dev.print(device=pdf, file="scorecard_emp.pdf",width=8,height=6)
nvar <- 4
plot(as.Date(rownames(data), format="%Y-%m-%d"), data$RRSFS, type="l", xlab="", ylab="", main="Retail Sales")
abline(a=data.mean[nvar], b=0, col='red')
abline(a=data.mean[nvar]+data.sdev[nvar], b=0, col='red', lty=2)
abline(a=data.mean[nvar]-data.sdev[nvar], b=0, col='red', lty=2)
dev.print(device=pdf, file="scorecard.pdf",width=8,height=6)
source('~/Classes/Global_Economy/Code/R/indicators_ccf.R')
# set directory (needed only to direct where to print figures)
# reminder:  / not \
dir = "C:/Users/dbackus/Dropbox/Documents/Classes/Global_Economy/Code/R"
setwd(dir)
source('~/Classes/Global_Economy/Code/R/indicators_ccf.R')
View(data)
View(data)
fred.sym <- c("INDPRO", "PAYEMS", "M2SL", "NAPMNOI", "ICSA")
fred.data <- getFredTable(fred.sym)
# yoy difference eveything and start in Jan 1990
fred.data <- diff(log(fred.data),12)
fred.data <- fred.data["1990-01-01/"]  # slash means go
#  3. Cross-correlation functions (ccf's)
# ------------------------------------------------------------------------------
# save pars
old.pars <- par()
# not sure why, but ccf seems to need a data frame
data <- data.frame(fred.data)
# means and standard deviations
data.mean <- colMeans(data, na.rm=TRUE)
print(data.mean)
data.sdev <- sd(data, na.rm=TRUE)
print(data.sdev)
# correlations
cor(data, use="pairwise.complete.obs")
# compute and plot a ccf
par(mfcol=c(1))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
# do four at once, put in same plot
# write function for this ....
par(mfcol=c(2,2), mar=c(3,3,3,3))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Nonfarm Employment")
abline(v=0, col='red', lty=1)
ccf(data$HOUST,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Housing Starts")
abline(v=0, col='red', lty=1)
ccf(data$RRSFS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP",main="Retail Sales")
abline(v=0, col='red', lty=1)
ccf(data$NAPM,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP", main="Purchasing Managers Index")
abline(v=0, col='red', lty=1)
# print as pdf
dev.print(device=pdf, file="ccf_plot.pdf",width=8,height=6)
# do four at once, put in same plot
# write function for this ....
par(mfcol=c(2,2), mar=c(3,3,3,3))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Nonfarm Employment")
abline(v=0, col='red', lty=1)
ccf(data$M2SL,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Housing Starts")
abline(v=0, col='red', lty=1)
ccf(data$NAPMNOI,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP",main="Retail Sales")
abline(v=0, col='red', lty=1)
ccf(data$ICSA,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP", main="Purchasing Managers Index")
abline(v=0, col='red', lty=1)
# print as pdf
dev.print(device=pdf, file="ccf_plot.pdf",width=8,height=6)
# write function for this ....
par(mfcol=c(2,2), mar=c(3,3,3,3))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Nonfarm Employment")
abline(v=0, col='red', lty=1)
ccf(data$M2SL,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Money Supply M2")
abline(v=0, col='red', lty=1)
ccf(data$NAPMNOI,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP",main="New Orders")
abline(v=0, col='red', lty=1)
ccf(data$ICSA,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP", main="Initial Claims")
abline(v=0, col='red', lty=1)
# compute and plot a ccf
par(mfcol=c(1))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
#  2. Data input
# ------------------------------------------------------------------------------
# this version needs to be changed if we want to use monthly data for a series
# that comes in some other frequency; eg, SP500 is daily
fred.sym <- c("INDPRO", "PAYEMS", "M2SL", "NAPMNOI", "UNRATE")
fred.data <- getFredTable(fred.sym)
# yoy difference eveything and start in Jan 1990
fred.data <- diff(log(fred.data),12)
fred.data <- fred.data["1990-01-01/"]  # slash means go to end: "n1/n2", "/n2", "n1/"
#  3. Cross-correlation functions (ccf's)
# ------------------------------------------------------------------------------
# save pars
old.pars <- par()
# not sure why, but ccf seems to need a data frame
data <- data.frame(fred.data)
# means and standard deviations
data.mean <- colMeans(data, na.rm=TRUE)
print(data.mean)
data.sdev <- sd(data, na.rm=TRUE)
print(data.sdev)
# correlations
cor(data, use="pairwise.complete.obs")
# compute and plot a ccf
par(mfcol=c(1))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
# do four at once, put in same plot
# write function for this ....
par(mfcol=c(2,2), mar=c(3,3,3,3))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Nonfarm Employment")
abline(v=0, col='red', lty=1)
ccf(data$M2SL,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Money Supply M2")
abline(v=0, col='red', lty=1)
ccf(data$NAPMNOI,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP",main="New Orders")
abline(v=0, col='red', lty=1)
ccf(data$ICSA,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP", main="Initial Claims")
abline(v=0, col='red', lty=1)
# compute and plot a ccf
par(mfcol=c(1))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24,ylab="",xlab="Lag k relative to IP",main="Nonfarm Employment")
# do four at once, put in same plot
# write function for this ....
par(mfcol=c(2,2), mar=c(3,3,3,3))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Nonfarm Employment")
abline(v=0, col='red', lty=1)
ccf(data$M2SL,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Money Supply M2")
abline(v=0, col='red', lty=1)
ccf(data$NAPMNOI,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP",main="New Orders")
abline(v=0, col='red', lty=1)
ccf(data$UNRATE,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP", main="Initial Claims")
abline(v=0, col='red', lty=1)
# do four at once, put in same plot
# write function for this ....
par(mfcol=c(2,2), mar=c(3,3,3,3))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Nonfarm Employment")
abline(v=0, col='red', lty=1)
ccf(data$M2SL,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Money Supply M2")
abline(v=0, col='red', lty=1)
ccf(data$NAPMNOI,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP",main="New Orders")
abline(v=0, col='red', lty=1)
ccf(data$UNRATE,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP", main="Unemployment Rate")
abline(v=0, col='red', lty=1)
par(mfcol=c(2,2), mar=c(3,3,3,3))
ccf(data$PAYEMS,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Nonfarm Employment")
abline(v=0, col='red', lty=1)
ccf(data$M2SL,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="",xlab="Lag k relative to IP", main="Money Supply M2")
abline(v=0, col='red', lty=1)
ccf(data$UNRATE,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP", main="Unemployment Rate")
abline(v=0, col='red', lty=1)
ccf(data$NAPMNOI,data$INDPRO, na.action=na.pass, lag.max=24, ylim=c(-1,1), ylab="", xlab="Lag k relative to IP",main="New Orders")
abline(v=0, col='red', lty=1)
